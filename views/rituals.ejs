<!doctype html>
<% include partials/head %>
<body>
  <div id='content' />
  <% include partials/scripts %>
</body>
<script type="text/babel">
var colors = [
  { name: 'White', tag:'silver'},
  { name: 'Blue', tag:'blue' },
  { name: 'Black', tag:'black' },
  { name: 'Red', tag:'red'},
];
var ColorList = React.createClass(
  {
    render: function(){
       var self = this;
       return (
         <div>
           {this.props.colors.map(function(color){
             return (
               <div className='form-group' key={color.name}>
                 <label className='control-label col-xs-2' htmlFor='color-{color-name}' style={{color:color.tag, backgroundColor: color.background || 'white'}} >{color.name}</label>
                <div className='col-xs-4'>
                 <input name='color-{color.name}' className='form-control' value={color.quantity} onChange={self.handleChange.bind(self, color.name)}/>
                </div>
               </div>
               );}
           )}
         </div>
       );
    },
    handleChange: function(colorName, event){
      this.props.onQuantityChange(colorName, event.target.value);
    },
  }
);
var PullList = React.createClass({
    render: function() {
      var self = this;
      return (
        <div className='row'>
        <h5>Results: </h5>
        <ol>
        { this.props.pulls.map(function(pull, index){
          var color = self.props.colors.filter(color => color.name == pull)[0];
          return (
            <li key={color.name + '.' + index} style={{color: color.tag}}>{color.name}</li>
          )})}
       </ol>
       </div>
      );
    }
  });

var RitualsApp = React.createClass({
  getInitialState: function() {
    return {
      pulls: [],
      colorQuantities: this.props.colors.map(function(color){return { name:color.name, tag:color.tag, background: color.background, quantity:0 };}),
      pullQuantity: 1,
      readyToPull: false
    };
  },

  onQuantityChange: function (colorName, quantity){
        this.state.colorQuantities.filter(color => color.name == colorName).forEach(color => color.quantity = quantity);
        this.setState({
          colorQuantities: this.state.colorQuantities
        });
      },
  onPullQuantityChange: function (event) {
    this.setState({ pullQuantity: event.target.value});
  },
 pullFromBag: function (event){
   event.preventDefault();
   var totalMarbles = 0;
    for(var i = 0, len = this.state.colorQuantities.length; i < len; i++) {
      totalMarbles += +(this.state.colorQuantities[i].quantity);
    }

   var colorWeights = this.state.colorQuantities.map(function(color){ return +((color.quantity / totalMarbles).toFixed(2))});
   var colors = this.state.colorQuantities.map(function(color){return color.name});

   var pulls = [];
   for(var i = 0; i < this.state.pullQuantity; i++) {
     var color = getRandomItem(colors, colorWeights);
     pulls.push(color);
   }
   this.setState({ pulls: pulls});
 },
 fillBag: function(event) {
   event.preventDefault();
   this.setState({readyToPull: true})
 },
 reset: function(event) {
   this.state.colorQuantities.forEach(color => color.quantity = 0);
   this.setState({
     colorQuantities: this.state.colorQuantities,
     readyToPull: false
   })
 },
  render: function() {
    var form;
    if(this.state.readyToPull)
    {
        form = (
          <form role='form' className='form-horizontal' onSubmit={this.pullFromBag}>
            <fieldset>
              <div className='form-group'>
                <label htmlFor='pullQuantity' className='control-label col-xs-2'>Number to pull</label>
                <div className='col-xs-4'>
                  <input className='form-control' name='pullQuantity' type='text' value={this.state.pullQuantity} onChange={this.onPullQuantityChange} />
                </div>
              </div>
              <button type='submit' className='btn btn-default btn-primary'>Pull</button>
            </fieldset>
          </form>);
    } else {
        form = ( <form onSubmit={this.fillBag} role='form' className='form-horizontal' >
            <fieldset>
              <ColorList colors={this.state.colorQuantities} onQuantityChange={this.onQuantityChange} />
              <button type='submit' className='btn btn-default btn-primary'>Fill Bag</button>
              </fieldset>
          </form>);
    }
    return (
      <div className='container'>
        <h4>Ritual Pulls</h4>
        {form}
        <PullList colors={this.state.colorQuantities} pulls={this.state.pulls} readyToPull={this.state.readyToPull} />
      </div>
    )},
});

ReactDOM.render(<RitualsApp colors={colors} />, document.getElementById('content'));

var rand = function(min, max) {
    return Math.random() * (max - min) + min;
};


var getRandomItem = function(list, weight) {
    var total_weight = weight.reduce(function (prev, cur, i, arr) {
        return prev + cur;
    });

    var random_num = rand(0, total_weight);
    var weight_sum = 0;
    //console.log(random_num)

    for (var i = 0; i < list.length; i++) {
        weight_sum += weight[i];
        weight_sum = +weight_sum.toFixed(2);

        if (random_num <= weight_sum) {
            return list[i];
        }
    }

    // end of function
};
</script>
</html>
